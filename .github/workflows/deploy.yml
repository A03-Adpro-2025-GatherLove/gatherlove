name: CI/CD Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up JDK 21 (for Gradle build)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      # Cache Gradle dependencies for faster builds
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}

      # Build the Spring Boot application using Gradle
      - name: Build with Gradle
        run: ./gradlew build -x test

      # Build the Docker image
      - name: Build Docker image
        run: docker build -t gatherlove:latest .

      # Log in to DockerHub using stored credentials
      - name: Log into DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Tag the Docker image according to your DockerHub repository
      - name: Tag Docker image
        run: |
          docker tag gatherlove:latest ${{ secrets.DOCKERHUB_USERNAME }}/gatherlove:latest

      # Push the Docker image to DockerHub
      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gatherlove:latest

      # Deploy the container on your AWS EC2 instance using SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Pull the latest image from DockerHub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/gatherlove:latest
            # Stop and remove any existing container with the same name
            docker stop gatherlove || true
            docker rm gatherlove || true
            # Run the new container, passing environment variables for DB connectivity
            docker run -d --name gatherlove -p 8080:8080 \
              -e DB_URL=${{ secrets.DB_URL_PROD }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME_PROD }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD_PROD }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/gatherlove:latest